stage: 1
environmentVariables: false
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis
  namespace: '{{ namespace }}'
spec:
  podManagementPolicy: OrderedReady
  replicas: 2
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: redis
  serviceName: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - 'redis'
            topologyKey: kubernetes.io/hostname
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: role
                operator: In
                values:
                - memory
      containers:
      - name: keydb
        image: prlx/k8s-keydb:stable
        env:
        - name: MASTER
          value: 'true'
        - name: NAME
          value: 'redis'
        - name: NAMESPACE
          value: '{{ namespace }}'
        imagePullPolicy: Always
        livenessProbe:
          failureThreshold: 3
          initialDelaySeconds: 120
          periodSeconds: 15
          successThreshold: 1
          tcpSocket:
            port: redis
          timeoutSeconds: 1
        ports:
        - containerPort: 6379
          name: redis
          protocol: TCP
        resources:
          limits:
            cpu: 200m
            memory: 300M
          requests:
            cpu: 10m
            memory: 40M
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      tolerations:
      - effect: NoSchedule
        key: role
        operator: Equal
        value: memory
      initContainers:
      - command:
        - sh
        - -c
        - echo never > /host-sys/kernel/mm/transparent_hugepage/enabled
        image: busybox
        imagePullPolicy: Always
        name: disable-thp
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /host-sys
          name: host-sys
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
      volumes:
      - hostPath:
          path: /sys
          type: ""
        name: host-sys
---
stage: 1
apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: '{{ namespace }}'
spec:
  ports:
  - name: redis
    port: 6379
    protocol: TCP
    targetPort: 6379
  selector:
    app: redis
  sessionAffinity: None
  type: ClusterIP