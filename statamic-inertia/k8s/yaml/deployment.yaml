stage: 2
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  name: '{{ app }}-{{ branch }}-autoscaler'
  namespace: '{{ namespace }}'
spec:
  maxReplicas: 8
  minReplicas: 2
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: '{{ app }}-{{ branch }}-{{ build }}'
  targetCPUUtilizationPercentage: 80
---
stage: 2
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    cluster-autoscaler.kubernetes.io/safe-to-evict: 'true'
  labels:
    app: '{{ app }}-{{ branch }}-{{ build }}'
  name: '{{ app }}-{{ branch }}-{{ build }}'
  namespace: '{{ namespace }}'
spec:
  minReadySeconds: 10
  progressDeadlineSeconds: 600
  replicas: 2
  revisionHistoryLimit: 1
  selector:
    matchLabels:
      app: '{{ app }}-{{ branch }}-{{ build }}'
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      annotations:
        cluster-autoscaler.kubernetes.io/safe-to-evict: 'true'
      labels:
        app: '{{ app }}-{{ branch }}-{{ build }}'
    spec:
      containers:
        - name: php-fpm
          image: '{{ image_php_fpm }}'
          env:
            - name: DB_HOST
              valueFrom:
                secretKeyRef:
                  name: 'mysql57-credentials-{{ branch }}'
                  key: endpoint
            - name: DB_USERNAME
              valueFrom:
                secretKeyRef:
                  name: 'mysql57-credentials-{{ branch }}'
                  key: username
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: 'mysql57-credentials-{{ branch }}'
                  key: password
            - name: DB_DATABASE
              valueFrom:
                secretKeyRef:
                  name: 'mysql57-credentials-{{ branch }}'
                  key: database
            - name: AWS_BUCKET
              value: '{{ app }}-kbuild-{{ environment }}'
            - name: AWS_URL
              value: 'https://{{ app }}-kbuild-{{ environment }}.s3-eu-west-1.amazonaws.com'
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: 'aws-credentials'
                  key: AccessKeyId
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: 'aws-credentials'
                  key: SecretAccessKey
            - name: AWS_DEFAULT_REGION
              value: 'eu-west-1'
            - name: REDIS_HOST
              value: 'redis'
            - name: REDIS_PORT
              value: '6379'
            - name: CACHE_DRIVER
              value: 'redis'
            - name: SESSION_DRIVER
              value: 'redis'
            - name: QUEUE_CONNECTION
              value: 'redis'
            - name: SESSION_SECURE_COOKIE
              value: 'true'
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 1
            exec:
              command:
                - /healthcheck.sh
                - --listen-queue=20 # fails if there are more than 10 processes waiting in the fpm queue
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          readinessProbe:
            failureThreshold: 1
            exec:
              command:
                - /healthcheck.sh
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          resources:
            limits:
              cpu: '1'
              memory: 1024Mi
            requests:
              cpu: 50m
              memory: 120Mi
          volumeMounts:
            - name: shared-files
              mountPath: /src-shared
            - name: efs
              mountPath: /efs
        - name: openresty
          image: 'prlx/k8s-openresty-php-openresty:release-latest'
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: openresty
              scheme: HTTP
            initialDelaySeconds: 20
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: openresty
              scheme: HTTP
            initialDelaySeconds: 20
            periodSeconds: 5
            successThreshold: 2
            timeoutSeconds: 2
          ports:
            - containerPort: 80
              name: openresty
              protocol: TCP
          resources:
            limits:
              cpu: '1'
              memory: 1024Mi
            requests:
              cpu: 50m
              memory: 128Mi
          volumeMounts:
            - name: shared-files
              mountPath: /src-shared
            - name: openresty-config
              mountPath: /etc/nginx/conf.d/
            - name: efs
              mountPath: /efs
      volumes:
        - name: shared-files
          emptyDir: {}
        - name: 'openresty-config'
          configMap:
            name: '{{ branch }}-openresty-config'
            defaultMode: 420
        - name: efs
          persistentVolumeClaim:
            claimName: '{{ app }}-{{ environment }}'
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      terminationGracePeriodSeconds: 20
